/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooLegendre3Pdf.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

#include "legendre3f3.h"

ClassImp(RooLegendre3Pdf) 

 RooLegendre3Pdf::RooLegendre3Pdf(const char *name, const char *title, 
                        RooAbsReal& _costheta0,
                        RooAbsReal& _costheta1,
                        RooAbsReal& _costheta2,
                        RooAbsReal& _c000,
                        RooAbsReal& _c001,
                        RooAbsReal& _c002,
                        RooAbsReal& _c004,
                        RooAbsReal& _c006,
                        RooAbsReal& _c010,
                        RooAbsReal& _c011,
                        RooAbsReal& _c012,
                        RooAbsReal& _c014,
                        RooAbsReal& _c016,
                        RooAbsReal& _c020,
                        RooAbsReal& _c021,
                        RooAbsReal& _c022,
                        RooAbsReal& _c024,
                        RooAbsReal& _c026,
                        RooAbsReal& _c100,
                        RooAbsReal& _c101,
                        RooAbsReal& _c102,
                        RooAbsReal& _c104,
                        RooAbsReal& _c106,
                        RooAbsReal& _c110,
                        RooAbsReal& _c111,
                        RooAbsReal& _c112,
                        RooAbsReal& _c114,
                        RooAbsReal& _c116,
                        RooAbsReal& _c120,
                        RooAbsReal& _c121,
                        RooAbsReal& _c122,
                        RooAbsReal& _c124,
                        RooAbsReal& _c126,
                        RooAbsReal& _c200,
                        RooAbsReal& _c201,
                        RooAbsReal& _c202,
                        RooAbsReal& _c204,
                        RooAbsReal& _c206,
                        RooAbsReal& _c210,
                        RooAbsReal& _c211,
                        RooAbsReal& _c212,
                        RooAbsReal& _c214,
                        RooAbsReal& _c216,
                        RooAbsReal& _c220,
                        RooAbsReal& _c221,
                        RooAbsReal& _c222,
                        RooAbsReal& _c224,
                        RooAbsReal& _c226) :
   RooAbsPdf(name,title), 
   costheta0("costheta0","costheta0",this,_costheta0),
   costheta1("costheta1","costheta1",this,_costheta1),
   costheta2("costheta2","costheta2",this,_costheta2),
   c000("c000","c000",this,_c000),
   c001("c001","c001",this,_c001),
   c002("c002","c002",this,_c002),
   c004("c004","c004",this,_c004),
   c006("c006","c006",this,_c006),
   c010("c010","c010",this,_c010),
   c011("c011","c011",this,_c011),
   c012("c012","c012",this,_c012),
   c014("c014","c014",this,_c014),
   c016("c016","c016",this,_c016),
   c020("c020","c020",this,_c020),
   c021("c021","c021",this,_c021),
   c022("c022","c022",this,_c022),
   c024("c024","c024",this,_c024),
   c026("c026","c026",this,_c026),
   c100("c100","c100",this,_c100),
   c101("c101","c101",this,_c101),
   c102("c102","c102",this,_c102),
   c104("c104","c104",this,_c104),
   c106("c106","c106",this,_c106),
   c110("c110","c110",this,_c110),
   c111("c111","c111",this,_c111),
   c112("c112","c112",this,_c112),
   c114("c114","c114",this,_c114),
   c116("c116","c116",this,_c116),
   c120("c120","c120",this,_c120),
   c121("c121","c121",this,_c121),
   c122("c122","c122",this,_c122),
   c124("c124","c124",this,_c124),
   c126("c126","c126",this,_c126),
   c200("c200","c200",this,_c200),
   c201("c201","c201",this,_c201),
   c202("c202","c202",this,_c202),
   c204("c204","c204",this,_c204),
   c206("c206","c206",this,_c206),
   c210("c210","c210",this,_c210),
   c211("c211","c211",this,_c211),
   c212("c212","c212",this,_c212),
   c214("c214","c214",this,_c214),
   c216("c216","c216",this,_c216),
   c220("c220","c220",this,_c220),
   c221("c221","c221",this,_c221),
   c222("c222","c222",this,_c222),
   c224("c224","c224",this,_c224),
   c226("c226","c226",this,_c226)
 { 
 } 


 RooLegendre3Pdf::RooLegendre3Pdf(const RooLegendre3Pdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   costheta0("costheta0",this,other.costheta0),
   costheta1("costheta1",this,other.costheta1),
   costheta2("costheta2",this,other.costheta2),
   c000("c000",this,other.c000),
   c001("c001",this,other.c001),
   c002("c002",this,other.c002),
   c004("c004",this,other.c004),
   c006("c006",this,other.c006),
   c010("c010",this,other.c010),
   c011("c011",this,other.c011),
   c012("c012",this,other.c012),
   c014("c014",this,other.c014),
   c016("c016",this,other.c016),
   c020("c020",this,other.c020),
   c021("c021",this,other.c021),
   c022("c022",this,other.c022),
   c024("c024",this,other.c024),
   c026("c026",this,other.c026),
   c100("c100",this,other.c100),
   c101("c101",this,other.c101),
   c102("c102",this,other.c102),
   c104("c104",this,other.c104),
   c106("c106",this,other.c106),
   c110("c110",this,other.c110),
   c111("c111",this,other.c111),
   c112("c112",this,other.c112),
   c114("c114",this,other.c114),
   c116("c116",this,other.c116),
   c120("c120",this,other.c120),
   c121("c121",this,other.c121),
   c122("c122",this,other.c122),
   c124("c124",this,other.c124),
   c126("c126",this,other.c126),
   c200("c200",this,other.c200),
   c201("c201",this,other.c201),
   c202("c202",this,other.c202),
   c204("c204",this,other.c204),
   c206("c206",this,other.c206),
   c210("c210",this,other.c210),
   c211("c211",this,other.c211),
   c212("c212",this,other.c212),
   c214("c214",this,other.c214),
   c216("c216",this,other.c216),
   c220("c220",this,other.c220),
   c221("c221",this,other.c221),
   c222("c222",this,other.c222),
   c224("c224",this,other.c224),
   c226("c226",this,other.c226)
 { 
 } 



 Double_t RooLegendre3Pdf::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 


double coeff3[4][4][7];
coeff3[0][0][0] = c000;
coeff3[0][0][1] = c001;
coeff3[0][0][2] = c002;
coeff3[0][0][4] = c004;
coeff3[0][0][6] = c006;
coeff3[0][1][0] = c010;
coeff3[0][1][1] = c011;
coeff3[0][1][2] = c012;
coeff3[0][1][4] = c014;
coeff3[0][1][6] = c016;
coeff3[0][2][0] = c020;
coeff3[0][2][1] = c021;
coeff3[0][2][2] = c022;
coeff3[0][2][4] = c024;
coeff3[0][2][6] = c026;
coeff3[1][0][0] = c100;
coeff3[1][0][1] = c101;
coeff3[1][0][2] = c102;
coeff3[1][0][4] = c104;
coeff3[1][0][6] = c106;
coeff3[1][1][0] = c110;
coeff3[1][1][1] = c111;
coeff3[1][1][2] = c112;
coeff3[1][1][4] = c114;
coeff3[1][1][6] = c116;
coeff3[1][2][0] = c120;
coeff3[1][2][1] = c121;
coeff3[1][2][2] = c122;
coeff3[1][2][4] = c124;
coeff3[1][2][6] = c126;
coeff3[2][0][0] = c200;
coeff3[2][0][1] = c201;
coeff3[2][0][2] = c202;
coeff3[2][0][4] = c204;
coeff3[2][0][6] = c206;
coeff3[2][1][0] = c210;
coeff3[2][1][1] = c211;
coeff3[2][1][2] = c212;
coeff3[2][1][4] = c214;
coeff3[2][1][6] = c216;
coeff3[2][2][0] = c220;
coeff3[2][2][1] = c221;
coeff3[2][2][2] = c222;
coeff3[2][2][4] = c224;
coeff3[2][2][6] = c226;

 const double value=pdfval(costheta0,costheta1,costheta2,coeff3) ; 
 // return value;
 return (value>0.)?value:0.;
 } 



 Int_t RooLegendre3Pdf::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES

   // if (matchArgs(allVars,analVars,x)) return 1 ;    
   if ( matchArgs(allVars,analVars, RooArgSet(costheta0.arg(),costheta1.arg(),costheta2.arg()) ) ) return 1;

   return 0;
 } 



 Double_t RooLegendre3Pdf::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x

   // assert(code==1) ; 
   // return (x.max(rangeName)-x.min(rangeName)) ; 

double coeff3[4][4][7];
coeff3[0][0][0] = c000;
coeff3[0][0][1] = c001;
coeff3[0][0][2] = c002;
coeff3[0][0][4] = c004;
coeff3[0][0][6] = c006;
coeff3[0][1][0] = c010;
coeff3[0][1][1] = c011;
coeff3[0][1][2] = c012;
coeff3[0][1][4] = c014;
coeff3[0][1][6] = c016;
coeff3[0][2][0] = c020;
coeff3[0][2][1] = c021;
coeff3[0][2][2] = c022;
coeff3[0][2][4] = c024;
coeff3[0][2][6] = c026;
coeff3[1][0][0] = c100;
coeff3[1][0][1] = c101;
coeff3[1][0][2] = c102;
coeff3[1][0][4] = c104;
coeff3[1][0][6] = c106;
coeff3[1][1][0] = c110;
coeff3[1][1][1] = c111;
coeff3[1][1][2] = c112;
coeff3[1][1][4] = c114;
coeff3[1][1][6] = c116;
coeff3[1][2][0] = c120;
coeff3[1][2][1] = c121;
coeff3[1][2][2] = c122;
coeff3[1][2][4] = c124;
coeff3[1][2][6] = c126;
coeff3[2][0][0] = c200;
coeff3[2][0][1] = c201;
coeff3[2][0][2] = c202;
coeff3[2][0][4] = c204;
coeff3[2][0][6] = c206;
coeff3[2][1][0] = c210;
coeff3[2][1][1] = c211;
coeff3[2][1][2] = c212;
coeff3[2][1][4] = c214;
coeff3[2][1][6] = c216;
coeff3[2][2][0] = c220;
coeff3[2][2][1] = c221;
coeff3[2][2][2] = c222;
coeff3[2][2][4] = c224;
coeff3[2][2][6] = c226;

   if (code==1) {  
     Double_t val[5][2];
     
     val[0][0]=costheta0.min();
     val[0][1]=costheta0.max();
     val[1][0]=costheta1.min();
     val[1][1]=costheta1.max();
     val[2][0]=costheta2.min();
     val[2][1]=costheta2.max();
     
     Double_t result=0.;
     for (int a=0; a<=1; a++) {
       for (int b=0; b<=1; b++) {
	 for (int c=0; c<=1; c++) {
	   result= result + pow(-1., a+b+c+1) * primitiveval(val[0][a],val[1][b],val[2][c],coeff3);
	 }
       }
     }
     return result;
   }


   return 0 ; 
 } 



